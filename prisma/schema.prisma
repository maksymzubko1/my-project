datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum Interval {
  everyMinute
  every5Minute
  every15Minute
  every30Minute
  everyHour
  every4Hour
  everyDay
}

enum PostType {
  DEFAULT
  HIDDEN
  DRAFTED
}

enum MixinType {
  IMAGE
  TEXT
  POST
}

enum DisplayOn {
  LIST
  SEARCH
  BOTH
}

enum PageType {
  MAIN
  TAG_FILTER
  BOTH
}

model User {
  id       String    @id @default(cuid())
  email    String    @unique
  password Password?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Password {
  hash   String
  userId String @unique

  user User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Post {
  id          String  @id @default(cuid())
  title       String
  body        String
  description String?

  imageId String?
  image   Media?  @relation(fields: [imageId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  status    PostType @default(DEFAULT)
  isDeleted Boolean  @default(false)

  mixin   Mixin[]
  tagPost TagPost[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Tag {
  id   String @id @default(cuid())
  name String

  tagPost TagPost[]
}

model TagPost {
  tagId  String
  postId String

  tag  Tag  @relation(fields: [tagId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  createdAt DateTime @default(now())

  @@id([tagId, postId])
}

model Media {
  id   String  @id @default(cuid())
  name String?
  url  String

  posts  Post[]
  mixins Mixin[]
}

model Mixin {
  id           String     @id @default(cuid())
  type         MixinType
  name         String
  text         String?
  linkForImage String?
  linkForText  String?
  textForLink  String?
  draft        Boolean    @default(true)
  displayOn    DisplayOn?
  pageType     PageType?
  priority     Int        @default(0)
  regex        String?

  image   Media?  @relation(fields: [imageId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  imageId String?

  postId String?
  post   Post?   @relation(fields: [postId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model MixinSettings {
  id             String @id @default(cuid())
  mixinPerList   Int    @default(3)
  mixinPerSearch Int    @default(3)
}

model RSSSettings {
  id            String   @id @default(cuid())
  name          String
  source        String
  interval      Interval
  stopTags      String[] @default([])
  fieldMatching Json
  isPaused      Boolean  @default(false)
  lastFetched   DateTime @default(now())

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
