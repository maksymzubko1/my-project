datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum Interval {
  everyMinute
  every5Minute
  every15Minute
  every30Minute
  everyHour
  every4Hour
  everyDay
}

enum PostType {
  DEFAULT
  HIDDEN
  DRAFTED
}

model User {
  id       String    @id @default(cuid())
  email    String    @unique
  password Password?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Password {
  hash   String
  userId String @unique

  user User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Post {
  id          String  @id @default(cuid())
  title       String
  body        String
  description String?
  image       Media?

  status    PostType @default(DEFAULT)
  isDeleted Boolean  @default(false)

  tagPost TagPost[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Tag {
  id   String @id @default(cuid())
  name String

  tagPost TagPost[]
}

model TagPost {
  tagId  String
  postId String

  tag  Tag  @relation(fields: [tagId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  createdAt DateTime @default(now())

  @@id([tagId, postId])
}

model Media {
  id     String  @id @default(cuid())
  name   String?
  url    String
  postId String  @unique

  post Post @relation(fields: [postId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model RSSSettings {
  id            String   @id @default(cuid())
  name          String
  source        String
  interval      Interval
  stopTags      String[] @default([])
  fieldMatching Json
  isPaused      Boolean  @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
